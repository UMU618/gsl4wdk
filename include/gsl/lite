//
// UMU: This is a lite version of GSL for WDK
// https://github.com/UMU618/gsl4wdk
//

#pragma once

#ifdef _KERNEL_MODE
#include <type_traits>

namespace std {

#define _CONSTEXPR20 constexpr
#define _EXPORT_STD
#define _NODISCARD [[nodiscard]]
#define GSL_SUPPRESS(x) [[gsl::suppress(x)]]

// UMU: always noexcept, because we disable exceptions in kernel mode!
template <class _Ty, class _Other = _Ty>
_CONSTEXPR20 _Ty exchange(_Ty& _Val, _Other&& _New_val) noexcept {
  // assign _New_val to _Val, return previous _Val
  _Ty _Old_val = static_cast<_Ty&&>(_Val);
  _Val = static_cast<_Other&&>(_New_val);
  return _Old_val;
}

}  // namespace std
#else  // #ifdef _KERNEL_MODE
#include <utility>
#endif  // #ifdef _KERNEL_MODE

namespace gsl {

// final_action allows you to ensure something gets run at the end of a scope
template <class F>
class final_action {
 public:
  explicit final_action(const F& ff) noexcept : f{ff} {}
  explicit final_action(F&& ff) noexcept : f{std::move(ff)} {}

  ~final_action() noexcept {
    if (invoke)
      f();
  }

  final_action(final_action&& other) noexcept
      : f(std::move(other.f)), invoke(std::exchange(other.invoke, false)) {}

  final_action(const final_action&) = delete;
  void operator=(const final_action&) = delete;
  void operator=(final_action&&) = delete;

 private:
  F f;
  bool invoke = true;
};

// narrow_cast(): a searchable way to do narrowing casts of values
template <class T, class U>
constexpr T narrow_cast(U&& u) noexcept {
  return static_cast<T>(std::forward<U>(u));
}

//
// owner
//
// `gsl::owner<T>` is designed as a safety mechanism for code that must deal
// directly with raw pointers that own memory. Ideally such code should be
// restricted to the implementation of low-level abstractions. `gsl::owner` can
// also be used as a stepping point in converting legacy code to use more modern
// RAII constructs, such as smart pointers.
//
// T must be a pointer type
// - disallow construction from any type other than pointer type
//
template <class T, class = std::enable_if_t<std::is_pointer<T>::value>>
using owner = T;

}  // namespace gsl
